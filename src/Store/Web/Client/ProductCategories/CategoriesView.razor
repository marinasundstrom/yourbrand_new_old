@using BlazorApp.ProductCategories
@using Client.ProductCategories
@implements IDisposable
@inject IProductCategoryService ProductCategoryService
@inject NavigationManager NavigationManager
@inject PersistentComponentState ApplicationState

@if (categoryTreeNodes is not null)
{
    <CascadingValue Name="Path" Value="path">
    <ul id="myUL">
        @*<li>
        <div class="row">
        <div class="col">
        <a href="/categories" class="text-decoration-none text-reset @(path == string.Empty ? "active" : null)">
        All products
        </a>
        </div>
        </div>
        </li>*@

        @foreach (var node in categoryTreeNodes)
            {
                <CategoryTreeNodeView @key="node.Id" Node="node" OnClick="OnClick" />
            }
        </ul>
    </CascadingValue>
}

@code
{
    private PersistingComponentStateSubscription persistingSubscription;

    string? path;

    ProductCategoryTreeRootDto? categoryTree;
    IEnumerable<ProductCategoryTreeNodeDto>? categoryTreeNodes;

    protected override async Task OnInitializedAsync()
    {

        persistingSubscription =
        ApplicationState.RegisterOnPersisting(PersistData);

        path = new Uri(NavigationManager.Uri).LocalPath[1..];
        path = path.Substring(path.IndexOf("/") + 1);

        if (!ApplicationState.TryTakeFromJson<BlazorApp.ProductCategories.ProductCategoryTreeRootDto>(
        "categoryTree", out var restored))
        {
            categoryTree = await ProductCategoryService.GetProductCategoryTree(path);
        }
        else
        {
            categoryTree = restored!;
        }

        categoryTreeNodes = categoryTree.Categories;

        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("path", path);
        ApplicationState.PersistAsJson("categoryTree", categoryTree);

        return Task.CompletedTask;
    }

    [Parameter] public EventCallback<ProductCategoryTreeNodeDto> OnClick { get; set; } = default!;

    private void OnLocationChanged(object? sender, LocationChangedEventArgs eventArgs)
    {
        path = new Uri(NavigationManager.Uri).LocalPath[1..];
        path = path.Substring(path.IndexOf("/") + 1);
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}