@using BlazorApp.Products
@using BlazorApp.ProductCategories
@inject IProductsService ProductsService
@inject IProductCategoryService ProductCategoryService
@inject NavigationManager NavigationManager

<AppPageTitle>@(categoryName is null ? "Products" : categoryName)</AppPageTitle>

<div class="row gx-5 pt-md-4">

     <div class="col-md-3 d-none d-lg-block">

     </div>

     <div class="col-md-9 col-sm-md-12">
         <h1>@(categoryName is null ? "Products" : categoryName)</h1>

         <p class="d-none d-lg-block mb-5">@(categoryDescription is null ? "Here are our products." : categoryDescription)</p>
     </div>

    <div class="mb-4 d-xs-block d-sm-block d-sm-md-block d-md-none">
        <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Search..."
        @bind:event="oninput" @bind:get="SearchTerm" @bind:set="OnSearchTermChanged"></input>
    </div>

    <div class="col-md-3 d-none d-lg-block">
        <div class="card mb-4">
            <div class="card-body">
                <input type="text" class="form-control" id="exampleFormControlInput1" placeholder="Search..."
                    @bind:event="oninput" @bind:get="SearchTerm" @bind:set="OnSearchTermChanged"></input>
            </div>
        </div>

        <div class="d-none d-lg-block">
            <div class="accordion mb-4" id="accordionExample">
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingTwo">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseTwo" aria-expanded="true" aria-controls="collapseTwo">
                            Categories
                        </button>
                    </h2>
                    <div id="collapseTwo" class="accordion-collapse collapse show" aria-labelledby="headingTwo">
                        <div class="accordion-body">
                            <Client.ProductCategories.CategoriesView OnClick="OnItemClicked" />
                        </div>
                    </div>
                </div>
                <div class="accordion-item">
                    <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            Filters
                        </button>
                    </h2>
                    <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne">
                        <div class="accordion-body">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckIndeterminateDisabled" disabled>
                                <label class="form-check-label" for="flexCheckIndeterminateDisabled">
                                    Disabled indeterminate checkbox
                                </label>
                                </div>
                                <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckDisabled" disabled>
                                <label class="form-check-label" for="flexCheckDisabled">
                                    Disabled checkbox
                                </label>
                                </div>
                                <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="flexCheckCheckedDisabled" checked disabled>
                                <label class="form-check-label" for="flexCheckCheckedDisabled">
                                    Disabled checked checkbox
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div>
                <button class="btn btn-secondary float-end">Apply</button>
            </div>
        </div>
    </div>

    <div class="col-md-9 col-sm-md-12">
        @if ( /* loading || */ Â products is null)
        {
            <em>Loading...</em>
        }
        else if (error)
        {
            <h2>Sorry. We could not load any products.</h2>
            <p>Please try again later.</p>
        }
        else
        {
            if (products.Count == 0)
            {
                <p>No results</p>
            }
            else
            {
                <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-3 row-cols-xl-3 gx-4 gy-4 gx-md-5 gy-md-5 ">

                    @foreach (var product in products)
                    {
                        <ProductView @key="product.Id" Product="product" />
                    }

                </div>

                <Pagination Page="Page.GetValueOrDefault()" PageCount="pageCount" Href="/categories" PageChanged="OnPageChanged" class="mt-5" />
            }
        }
    </div>
</div>

@code
{
    ICollection<BlazorApp.Products.Product>? products;
    int pageCount = 0;
    bool loading = false;
    bool error = false;
    string? categoryName = null;
    string? categoryDescription = null;

    [Parameter]
    [EditorRequired]
    public int? Page { get; set; }

    [Parameter]
    public int? PageSize { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; }

    [Parameter]
    public string? Path { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(Path);

        if(!string.IsNullOrEmpty(Path)) 
        {
            var category = await ProductCategoryService.GetProductCategoryById(Path);

            categoryName = category.Name;
            categoryDescription = category.Description;
        }

        await FetchItems(Page.GetValueOrDefault());
    }

    private async Task OnPageChanged(int page) 
    {
        Page = page;

        await FetchItems(page);

        NavigationManager.NavigateTo($"/products?page={Page}", replace: true);
    }

    CancellationTokenSource cts = new ();
    Task? task;
    
    private void OnSearchTermChanged(string value) 
    {
        SearchTerm = value;
        Page = 1;

        if(task is not null) {
            cts.Cancel();
            cts = new ();
        }

        task = Task.Delay(400).ContinueWith(async t => {
            if(cts.IsCancellationRequested) {
                return;
            }

            await FetchItems(Page.GetValueOrDefault(), cts.Token);
            NavigationManager.NavigateTo($"/categories?page={Page}&searchTerm={SearchTerm}", replace: true);

            categoryName = null;
            categoryDescription = null;

            StateHasChanged();

            task = null;
        }, cts.Token);
    }

    private async Task FetchItems(int page, CancellationToken cancellationToken = default) 
    {
        error = false;
        loading = true;

        await InvokeAsync(StateHasChanged);

        try 
        {
            var pagedResult = await ProductsService.GetProducts(page, PageSize, SearchTerm, Path, cancellationToken);

            products = pagedResult.Items.ToList();
            pageCount = (int)Math.Ceiling((float)pagedResult.Total / (float)PageSize.GetValueOrDefault());
        }
        catch 
        {
            error = true;
        }
        finally
        {
            loading = false;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnItemClicked(ProductCategoryTreeNodeDto node) 
    {
        categoryName = node.Name;
        categoryDescription = node.Description;

        Path = node.Path;
        await FetchItems(1);
        NavigationManager.NavigateTo($"/categories/{node.Path}", replace: true);
    }
}