@attribute [RenderModeWebAssembly]
@attribute [StreamRendering(true)]
@using BlazorApp
@using BlazorApp.Cart
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ICartService CartService
@inject RenderingContext RenderingContext

<div class="offcanvas offcanvas-end" style="z-index: 99999;" tabindex="-1" id="offcanvasRight" aria-labelledby="offcanvasRightLabel">
  <div class="offcanvas-header">
    <h5  class="offcanvas-title" id="offcanvasRightLabel">Basket</h5>
    <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
  </div>
  <div class="offcanvas-body">
    <ul style="
        list-style: none;
        margin: 0;
        padding: 0;
    ">
        @if(cartItems is not null) 
        {
            @if(cartItems!.Any()) 
            {
                <li>
                    <ul class="mb-4 list-unstyled">
                        @foreach (var cartItem in cartItems)
                        {
                            <li @key="cartItem.Id">
                                <div class="row">
                                    <div class="col-1" style="width: 90px;">
                                        <a href="/products/@cartItem.ProductHandle">
                                            <img src="@cartItem.Image" class="ms-0 my-2 mx-2 me-4 img-border-rounded shadow" style="width: 60px; height: 60px; aspect-ratio: 1 / 1; object-fit: cover;" />
                                        </a>    
                                    </div>

                                    <div class="col">
                                        <div class="d-flex justify-content-between">
                                            <div class="py-2">
                                                <h6 class="mb-2">@cartItem.Name x @cartItem.Quantity</h6>
                                                <small class="text-muted">@cartItem.Description</small>
                                                <p class="small text-muted my-2">@((cartItem.Price * cartItem.Quantity).FormatCurrency(currency))</p>
                                            </div>

                                            <div>
                                                <button class="btn" @onclick="async () => await DeleteItem(cartItem)"><i class="bi bi-trash" /></button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>   
                        }

                        <hr />

                        <li class="mt-4 d-flex justify-content-between">
                            <span>Total</span>
                            <strong>@(cartItems.Sum(x => x.Total).FormatCurrency(currency))</strong>
                        </li>
                    </ul>
                </li>

                <li class="mb-2">
                    <CartButtons />
                </li>
            }
            else 
            {
                <span class="mx-4 my-2">You have not added any items yet :( </span>
            }
        }
        else 
        {
            <span>Loading...</span>
        }
    </ul>
  </div>
</div>

@code
{
    string currency = "SEK";
    IEnumerable<BlazorApp.Cart.CartItem>? cartItems;

    protected override async Task OnInitializedAsync()
    {
        CartService.CartUpdated += OnCartUpdated;

        // If this component is initialized on the Basket page
        // then that page will initiate the reload.
        // This only applies to fresh navigations or reloads
        // due to DOM preservation.

        if(!NavigationManager.Uri.ToString().EndsWith("/basket")) 
        {
            await CartService.InitializeAsync();
        }
    }

    private async void OnCartUpdated(object? sender, EventArgs eventArgs) 
    {
        cartItems = CartService.Items.ToList();
        await InvokeAsync(StateHasChanged);
    }

    async Task DeleteItem(CartItem cartItem)
    {
        await CartService.RemoveCartItem(cartItem.Id);
    }

    public void Dispose() 
    {
        CartService.CartUpdated -= OnCartUpdated;
    }
}
