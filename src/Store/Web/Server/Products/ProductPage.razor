@page "/products/{id}"
@attribute [StreamRendering(false)]
@using BlazorApp.Products
@using Client.Products
@using System.Globalization
@inject IProductsService ProductsService

@if(product is null) 
{
    <em>Loading...</em>
}
else 
{
    <AppPageTitle>@product.Name</AppPageTitle>

    <HeadContent>
        <meta name="description" content="@product.Description" data-dynamic="1" />
        <meta property="og:url" content="https://www.kjell.com/se/produkter/dator/enkortsdator/raspberry-pi-4-model-b-enkortsdator-4-gb-ram-p88181" data-dynamic="1" />
        <meta property="og:type" content="website" data-dynamic="1" />
        <meta property="og:title" content="@product.Name" data-dynamic="1" />
        <meta property="og:description" content="@product.Description" data-dynamic="1" />
        <meta property="og:image" content="@product.Image" data-dynamic="1" />
        <meta property="product:condition" content="new" data-dynamic="1" />
        <meta property="product:availability" content="in stock" data-dynamic="1" />
        <meta property="product:price:amount" content="@product.Price.ToString(CultureInfo.InvariantCulture)" data-dynamic="1" />
        <meta property="product:price:currency" content="@currency" data-dynamic="1" />
        <meta property="product:retailer_item_id" content="@product.Id" data-dynamic="1" />
    </HeadContent>
    
    <article itemscope itemtype="http://schema.org/Product" style="display: flex;">

        <div class="row gx-5">
            <div class="col-md-4 mb-4">
                <img class="bd-placeholder-img card-img-top shadow" itemprop="image" style="object-fit: cover; aspect-ratio: 1 / 1;" src="@product.Image" />
            </div>

            <div class="col-md-8 mb-4">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a class="text-decoration-none text-reset muted" href="/products">Products</a></li>
                        <li class="breadcrumb-item"><a class="text-decoration-none text-reset muted" href="/products/coffee">Coffee</a></li>
                    </ol>
                </nav>

                <h1 itemprop="name">@product.Name</h1>

                <div class="mb-4" itemprop="offers" itemscope itemtype="https://schema.org/Offer">
                    <meta property="priceCurrency" content="@currency">
                    <h5 class="price2" itemprop="price" content="@product.Price" style="display: inline-block; font-weight: 500; color: #ca0000; line-height: 0;">@(((decimal)product.Price).FormatCurrency(currency))</h5>
                    @if(product.RegularPrice is not null) 
                    {
                        <h5 class="price2 text-muted" style="display: inline-block; text-decoration: line-through; color: gray !important; margin-left: 10px; line-height: 0;">@(((decimal?)product.RegularPrice)?.FormatCurrency(currency))</h5>
                    }
                </div>

                <p itemprop="description">@product.Description</p>

                <Client.Products.CartButton Product="productInfo" />

                <div class="accordion mt-5" id="accordionExample">
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            Specification
                        </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne">
                        <div class="accordion-body">
                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                        </div>
                    </div>
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingTwo">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                            Reviews
                        </button>
                        </h2>
                        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo">
                        <div class="accordion-body">
                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
                        </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </article>
}

@code 
{
    string currency = "SEK";
    BlazorApp.Products.Product? product;
    ProductInfo? productInfo;

    [Parameter]
    public string Id { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsService.GetProductById(Id);
        productInfo = new ProductInfo(product.Name, product.Image, product.Id, product.Handle, product.Description, (decimal)product.Price, (decimal?)product.RegularPrice);
    }
}