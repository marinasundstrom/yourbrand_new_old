@page "/orders/new"
@page "/orders/{OrderNo:int}"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations
@using YourBrand.Sales
@inject NavigationManager NavigationManager
@inject IOrdersClient OrdersClient
@inject IOrderStatusesClient OrderStatusesClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (order is not null)
{
    <AppPageTitle>Order #@OrderNo</AppPageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Order #@OrderNo</MudText>

    <MudPaper Elevation="25" Class="pa-4">

        <div class="mb-4">
            @* <MudButton StartIcon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/orders/{Id}/file")">
        Download
        </MudButton> *@

            @if (order.Status.Id == 1)
            {
                <MudButton StartIcon="@Icons.Filled.Delete" OnClick="async (e) => await DeleteOrder(order)">
                    Delete
                </MudButton>
            }
        </div>

        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="12" md="6" lg="3">
                <MudField Label="Date">@Model.Date?.ToString("yyyy-MM-dd")</MudField>
            </MudItem>

            <MudItem xs="12" sm="12" md="6" lg="3">
                <div class="d-flex">
                    <MudField Label="Status">@Model.Status.Name</MudField>
                    <MudIconButton Icon="@Icons.Filled.Edit" Class="justify-end"
                        OnClick="async () => await UpdateOrderStatus()"></MudIconButton>
                </div>
            </MudItem>

            @*

        <MudItem xs="12" sm="12" md="6" lg="3">
        @if (Model.Status >= OrderStatus.Placed)
        {
        <MudField Label="Due Date">@Model.DueDate?.ToString("yyyy-MM-dd")</MudField>
        }
        else
        {
        <MudDatePicker Label="Due Date" Date="@Model.DueDate" DateChanged="OnDueDateChanged" For="() => Model.DueDate">
        </MudDatePicker>
        }
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
        @if (Model.Status >= OrderStatus.Placed)
        {
        <MudField Label="Reference">@Model.Reference</MudField>
        }
        else
        {
        <MudTextField Label="Reference" Text="@Model.Reference" TextChanged="OnReferenceChanged" For="()
        =>Model.Reference">
        </MudTextField>
        }
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
        @if (Model.Status >= OrderStatus.Placed)
        {
        <MudField Label="Note">@Model.Note</MudField>
        }
        else
        {
        <MudTextField Label="Note" Text="@Model.Note" TextChanged="OnNoteChanged" For="() => Model.Note"></MudTextField>
        }
        </MudItem>
        *@

            <MudItem xs="6" sm="6" md="3" lg="3">
                <MudField Label="Total">@Model.Total.FormatCurrency(order.Currency)</MudField>
            </MudItem>

            <MudItem xs="6" sm="6" md="3" lg="3">
                <MudField Label="Sub Total">@Model.SubTotal.FormatCurrency(order.Currency)</MudField>
            </MudItem>

            <MudItem xs="6" sm="6" md="3" lg="3">
                <MudField Label="VAT">@Model.Vat.FormatCurrency(order.Currency)</MudField>
            </MudItem>

            <MudItem xs="6" sm="6" md="3" lg="3">
                <MudField Label="Customer No">@order.CustomerId</MudField>
            </MudItem>

            <MudItem xs="12" sm="12" md="12" lg="12">
                <MudField Label="Notes">@Model.Notes</MudField>
            </MudItem>

            @if (order.BillingDetails is not null)
            {
                <MudItem xs="12" sm="6" md="3" lg="3">
                    <MudText Typo="Typo.h5" Class="mb-1">Billing details</MudText>
                    <MudText>@order.BillingDetails.FirstName @order.BillingDetails.LastName</MudText>
                    <MudText>@order.BillingDetails.Ssn</MudText>

                    @{
                        var address = order.BillingDetails.Address;
                    }
                    <MudText Class="mt-2">@address.Thoroughfare @address.Premises @address.SubPremises</MudText>
                    <MudText>@address.PostalCode @address.Locality</MudText>
                    <MudText>@address.Country</MudText>

                    <MudText Class="mt-2">@order.BillingDetails.PhoneNumber</MudText>
                    <MudText>@order.BillingDetails.Email</MudText>
                </MudItem>
            }

            @if (order.ShippingDetails is not null)
            {
                <MudItem xs="12" sm="6" md="3" lg="3">
                    <MudText Typo="Typo.h5" Class="mb-1">Shipping details</MudText>
                    <MudText>@order.ShippingDetails.FirstName @order.ShippingDetails.LastName</MudText>
                    @{
                        var address = order.ShippingDetails.Address;
                    }
                    <MudText class="mt-2">@address.Thoroughfare @address.Premises @address.SubPremises</MudText>
                    <MudText>@address.PostalCode @address.Locality</MudText>
                    <MudText>@address.Country</MudText>
                </MudItem>
            }

            <MudItem xs="12" sm="6" md="3" lg="3">
                <MudText Typo="Typo.h5" Class="mb-1">VAT</MudText>
                <MudTable T="OrderVatAmount" Elevation="0" Items="order.VatAmounts">
                    <HeaderContent>
                        <MudTh>Rate</MudTh>
                        <MudTh>Amount</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="vatAmount">
                        <MudTd DataLabel="Rate">@vatAmount.Name</MudTd>
                        <MudTd DataLabel="Amount">@vatAmount.Amount.FormatCurrency(order.Currency)</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-8 mb-4">Items</MudText>

    @if (Model.Status.Id == 1)
    {
        <MudButton Variant="Variant.Filled" OnClick="AddItem" Class="mb-2">Add item</MudButton>
    }

    <MudTable T="OrderItemViewModel" @ref="table" Items="Model.Items" Hover="true" Elevation="25" Breakpoint="Breakpoint.Sm"
        Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await UpdateOrderItem(e.Item)">
        <HeaderContent>
            <MudTh>Item Id</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Unit</MudTh>
            <MudTh>Unit Price</MudTh>
            <MudTh>VAT Rate</MudTh>
            <MudTh>VAT</MudTh>
            <MudTh>Discount</MudTh>
            <MudTh>Total</MudTh>
            @if (Model.Status.Id == 1)
            {
                <MudTh></MudTh>
            }
        </HeaderContent>
        <RowTemplate Context="orderItem">
            <MudTd DataLabel="Item Id">@orderItem.ItemId</MudTd>
            <MudTd DataLabel="Description">@orderItem.Description</MudTd>
            <MudTd DataLabel="Quantity">@orderItem.Quantity</MudTd>
            <MudTd DataLabel="Unit">@orderItem.Unit</MudTd>
            <MudTd DataLabel="Unit Price">@orderItem.UnitPrice.FormatCurrency(order.Currency)</MudTd>
            <MudTd DataLabel="VAT Rate">@(orderItem.VatRate * 100)%</MudTd>
            <MudTd DataLabel="VAT">@orderItem.Vat.FormatCurrency(order.Currency)</MudTd>
            <MudTd DataLabel="Discount">@orderItem.Discount?.FormatCurrency(order.Currency)</MudTd>
            <MudTd DataLabel="Total">@orderItem.LineTotal.FormatCurrency(order.Currency)</MudTd>
            @if (Model.Status.Id == 1)
            {
                <MudTd>
                    <MudIconButton Icon="@Icons.Filled.Delete" Size="Size.Small"
                        OnClick="async () => await DeleteItem(orderItem)" />
                </MudTd>
            }
        </RowTemplate>

        <ChildRowContent>
            @if (!string.IsNullOrEmpty(context.Notes))
            {
                <tr>
                    <MudTd colspan="9" class="mud-table-cell">
                        <MudText Typo="Typo.body2">@context.Notes</MudText>
                    </MudTd>
                </tr>
            }
        </ChildRowContent>

        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>
}

@code
{
    YourBrand.Sales.Order? order;
    MudTable<OrderItemViewModel> table;
    bool loading = false;

    [Parameter]
    public int? OrderNo { get; set; }

    [Parameter]
    public string? Id { get; set; }

    [Required]
    public OrderViewModel Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (OrderNo is not null)
        {
            order = await OrdersClient.GetOrderByNoAsync(OrderNo.GetValueOrDefault());

            Model = order.ToModel();
        }
        else
        {
            order = await OrdersClient.CreateDraftOrderAsync(new CreateDraftOrderRequest());

            Model = order.ToModel();

            NavigationManager.NavigateTo($"/orders/{Model.Id}", replace: true);

            Snackbar.Add("Created order draft", Severity.Info);
        }
    }

    private async Task Submit()
    {
        await Task.CompletedTask;
    }

    private async Task AddItem()
    {
        var model = new OrderItemViewModel();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(OrderItemDialog.OrderId), order.Id);

        var dialogRef = DialogService.Show<OrderItemDialog>("New Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        var vm = (OrderItemViewModel)result.Data;

        Model.Items.Add(vm);
    }

    private async Task UpdateOrderItem(OrderItemViewModel model)
    {
        if (Model.Status.Id == 5 || Model.Status.Id == 2 || Model.Status.Id == 6 || Model.Status.Id == 7)
        {
            return;
        }

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(OrderItemDialog.OrderId), order.Id);
        dialogParameters.Add(nameof(OrderItemDialog.Model), model);

        var dialogRef = DialogService.Show<OrderItemDialog>("Update Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;
    }

    public async Task UpdateOrderStatus()
    {
        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SetStatusDialog.OrderId), order.Id);
        dialogParameters.Add(nameof(SetStatusDialog.Status), Model.Status);

        var dialogRef = DialogService.Show<SetStatusDialog>("Update status", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        await OrdersClient.UpdateStatusAsync(order.Id, ((OrderStatus)result.Data).Id);

        Model.Status = (OrderStatus)result.Data;
    }

    private async Task DeleteOrder(Order order)
    {
        var result = await DialogService.ShowMessageBox("Delete draft order", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await OrdersClient.DeleteOrderAsync(order.Id);

        NavigationManager.NavigateTo("/orders");
    }

    async Task DeleteItem(OrderItemViewModel orderItem)
    {
        var result = await DialogService.ShowMessageBox("Delete item", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await OrdersClient.RemoveOrderItemAsync(order.Id, orderItem.Id);

        Model.Items.Remove(orderItem);
    }
}