@page "/products/{id}"
@using AdminAPI
@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject ISnackbar Snackbar

@if(loaded) 
{
    <PageTitle>@detailsUpdateViewModel.Name</PageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true">@detailsUpdateViewModel.Name</MudText>

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudImage Src="@image" ObjectFit="ObjectFit.Cover" Height="200" Width="200" Alt="@detailsUpdateViewModel.Name"
            Elevation="25" Class="rounded-lg" />

            <div>
                <InputFile id="fileInput" OnChange="UploadProductImage" hidden accept="*.jpg, *.jpeg, *.png" />

                <MudButton HtmlTag="label" Color="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload" for="fileInput">
                    Upload image
                </MudButton>
            </div>
        </MudItem>

        <MudItem xs="12" sm="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <EditForm Model="@detailsUpdateViewModel" OnValidSubmit="UpdateDetails">
                    <DataAnnotationsValidator />

                    <MudTextField Label="Name" @bind-Value="detailsUpdateViewModel.ShadowName" Variant="Variant.Outlined" For="() => detailsUpdateViewModel.ShadowName"></MudTextField>
                    <MudTextField Label="Description" Lines="5" @bind-Value="detailsUpdateViewModel.Description" Variant="Variant.Outlined" For="() => detailsUpdateViewModel.Description" Class="mt-4"></MudTextField>

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="mt-4">Update details</MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <EditForm Model="@priceUpdateViewModel" OnValidSubmit="UpdatePrice">
                    <DataAnnotationsValidator />

                    <MudNumericField Label="Price" @bind-Value="priceUpdateViewModel.Price" Variant="Variant.Outlined" For="() => priceUpdateViewModel.Price" Adornment="Adornment.End" AdornmentText="sek"></MudNumericField>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="mt-4">Update price</MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <EditForm Model="@handleUpdateViewModel" OnValidSubmit="UpdateHandle">
                    <DataAnnotationsValidator />

                    <MudTextField Label="Handle" @bind-Value="handleUpdateViewModel.Handle" Variant="Variant.Outlined" For="() => handleUpdateViewModel.Handle"></MudTextField>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="mt-4">Update handle</MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>
        
    </MudGrid>
}

@code 
{
    bool loaded = false;
    DetailsUpdateViewModel detailsUpdateViewModel;
    PriceUpdateViewModel priceUpdateViewModel;
    HandleUpdateViewModel handleUpdateViewModel;
    string image;

    [Parameter] public string Id { get; set; }
 
    protected override async Task OnInitializedAsync() 
    {
        var product = await ProductsClient.GetProductByIdAsync(Id);

        detailsUpdateViewModel = new ()
        {
            Name = product.Name,
            ShadowName = product.Name,
            Description = product.Description
        };

        priceUpdateViewModel = new () {
            Price = product.Price
        };

        handleUpdateViewModel = new () {
            Handle = product.Handle
        };

        image = product.Image;

        loaded = true;
    }

    private async Task UpdateDetails() 
    {
        try 
        {
            await ProductsClient.UpdateProductDetailsAsync(Id, new UpdateProductDetailsRequest() {
                Name = detailsUpdateViewModel.ShadowName,
                Description = detailsUpdateViewModel.Description,
            });

            detailsUpdateViewModel.Name = detailsUpdateViewModel.ShadowName;

            Snackbar.Add("Product details were updated", Severity.Info);
        }
        catch 
        {
            Snackbar.Add("Failed to update product details", Severity.Error);
        }
    }

    private async Task UpdatePrice() 
    {
        try 
        {
            await ProductsClient.UpdateProductPriceAsync(Id, new UpdateProductPriceRequest() {
                Price = priceUpdateViewModel.Price
            });

            Snackbar.Add("Price was updated", Severity.Info);
        }
        catch 
        {
            Snackbar.Add("Failed to update product price", Severity.Error);
        }
    }

    class DetailsUpdateViewModel 
    {
        public string Name { get; set; }

        [Required]
        public string ShadowName { get; set; }

        [Required]
        public string Description { get; set; }
    }

    class PriceUpdateViewModel 
    {
        [Range(0, 100000)]
        public decimal Price { get; set; }
    }

    private async Task UploadProductImage(InputFileChangeEventArgs e)
    {
        try 
        {
            var file = e.GetMultipleFiles().First();
            image = await ProductsClient.UploadProductImageAsync(Id, new FileParameter(file.OpenReadStream(3 * 1000000), file.Name));

            Snackbar.Add("Image was updated", Severity.Info);
        }
        catch 
        {
            Snackbar.Add("Failed to update product image", Severity.Error);
        }
    }

    class HandleUpdateViewModel 
    {
        [Required]
        public string Handle { get; set; }
    }

    private async Task UpdateHandle() 
    {
        try 
        {
            await ProductsClient.UpdateProductHandleAsync(Id, new UpdateProductHandleRequest() {
                Handle = handleUpdateViewModel.Handle
            });

            Snackbar.Add("Handle was updated", Severity.Info);
        }
        catch 
        {
            Snackbar.Add("Failed to update product handle", Severity.Error);
        }
    }
}