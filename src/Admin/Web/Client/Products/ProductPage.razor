@page "/products/{id}"
@using AdminAPI
@attribute [StreamRendering(false)]
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode renderMode
@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject IProductCategoriesClient ProductCategoriesClient
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IDisposable

@if (loaded)
{
    <MudBreadcrumbs Items="_items" Class="ps-0"></MudBreadcrumbs>

    <PageTitle>@detailsUpdateViewModel.Name</PageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true">@detailsUpdateViewModel.Name</MudText>

    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <ImageUpdateView Model="imageUpdateViewModel" />
        </MudItem>

        <MudItem xs="12" sm="12" md="6">
            <MudPaper Elevation="2" Class="pa-4">
                <DetailsUpdateView @key="detailsUpdateViewModel.ProductId" Model="@detailsUpdateViewModel" />
            </MudPaper>
        </MudItem>

        @if (product.Parent is null)
        {
            <MudItem xs="12" sm="12" md="3">
                <MudPaper Elevation="2" Class="pa-4">
                    <CategoryUpdateView Model="categoryUpdateViewModel" />
                </MudPaper>
            </MudItem>
        }

        <MudItem xs="12" sm="12" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <PriceUpdateView Model="priceUpdateViewModel" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <HandleUpdateView Model="handleUpdateViewModel" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="3">
            <MudPaper Elevation="2" Class="pa-4">
                <VisibilityUpdateView Model="visibilityUpdateViewModel" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            <ProductAttributesView @key="product.Id" ProductId="product.Id" HasVariants="product.HasVariants" />
        </MudItem>

        @if (product.Parent is null)
        {
            <MudItem xs="12" sm="12" md="12">
                <VariantView @key="product.Id" ProductId="product.Id" Product="product" />
            </MudItem>
        }

    </MudGrid>
}

@code
{
    private static IComponentRenderMode renderMode =
    new InteractiveWebAssemblyRenderMode(prerender: true);

    bool loaded = false;
    Product product;
    ImageUpdateViewModel imageUpdateViewModel;
    DetailsUpdateViewModel detailsUpdateViewModel;
    CategoryUpdateViewModel categoryUpdateViewModel;
    PriceUpdateViewModel priceUpdateViewModel;
    HandleUpdateViewModel handleUpdateViewModel;
    VisibilityUpdateViewModel visibilityUpdateViewModel;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>();

    [Parameter] public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;

        await LoadAsync();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadAsync();

        await InvokeAsync(StateHasChanged);
    }

    async Task LoadAsync()
    {
        product = await ProductsClient.GetProductByIdAsync(Id);

        _items.Clear();

        _items.Add(new BreadcrumbItem("Products", href: "/products"));

        if (product.Parent is null)
        {
            _items.Add(new BreadcrumbItem(product.Name, href: null, disabled: true));
        }
        else
        {
            _items.Add(new BreadcrumbItem(product.Parent.Name, href: $"/products/{product.Parent.Id}"));
            _items.Add(new BreadcrumbItem(product.Name, href: null, disabled: true));
        }

        imageUpdateViewModel = ImageUpdateViewModel.Create(
        product,
        ProductsClient,
        Snackbar);

        detailsUpdateViewModel = DetailsUpdateViewModel.Create(
        product,
        ProductsClient,
        Snackbar);

        priceUpdateViewModel = PriceUpdateViewModel.Create(
        product,
        ProductsClient,
        Snackbar);

        handleUpdateViewModel = HandleUpdateViewModel.Create(
        product,
        ProductsClient,
        Snackbar);

        visibilityUpdateViewModel = VisibilityUpdateViewModel.Create(
        product,
        ProductsClient,
        Snackbar);

        if (product.Parent is null)
        {
            categoryUpdateViewModel = CategoryUpdateViewModel.Create(
            product,
            ProductsClient,
            ProductCategoriesClient,
            Snackbar);
        }

        loaded = true;
    }
}