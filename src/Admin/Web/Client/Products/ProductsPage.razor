@page "/products"
@using AdminAPI
@inject IProductsClient ProductsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Products</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Products</MudText>

<MudButton OnClick="OpenCreateProductDialog" Variant="Variant.Filled" Color="Color.Primary">
    New product
</MudButton>

<MudTable T="Product" ServerData="@(new Func<TableState, Task<TableData<Product>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table" OnRowClick="@OnItemClicked">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Immediate="true" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Id" T="Product">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Name" T="Product">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Description" T="Product">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Price" T="Product">Price</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Price">@context.Price sek</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<Product> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<Product>> ServerReload(TableState state)
    {
        var result = await ProductsClient.GetProductsAsync(state.Page + 1, state.PageSize, searchString);
        return new TableData<Product>() {TotalItems = result.Total, Items = result.Items};
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void OnItemClicked(TableRowClickEventArgs<Product> args) 
    {
        NavigationManager.NavigateTo($"/products/{args.Item.Id}");
    }

    private async Task OpenCreateProductDialog()
    {
        var dialog = await DialogService.ShowAsync<CreateProductDialog>("New product");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var product = (AdminAPI.Product)result.Data;
            NavigationManager.NavigateTo($"/products/{product.Id}");
        }
    }
}