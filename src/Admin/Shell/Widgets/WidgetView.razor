@implements IDisposable

<CascadingValue Value="@Widget">
    <MudPaper Elevation="25" Class="pa-4" Style="@Style">
        <div class="d-flex justify-space-between flex-grow-1 gap-4">
            <div>
                @if (Widget.IsHeaderVisible)
                {
                    <MudText Typo="Typo.h6">@Widget.Name</MudText>
                }
            </div>
            <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Dense="true">
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Filled.MoreVert" aria-label="settings" Size="Size.Small"></MudIconButton>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" class="me-2" />
                            <MudText Style="overflow: hidden; white-space: nowrap;">Settings</MudText>
                        </div>
                    </MudMenuItem>
                    <MudMenuItem>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" class="me-2" />
                            <MudText Style="overflow: hidden; white-space: nowrap;">Remove</MudText>
                        </div>
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        </div>
        @if (Widget.RequiresAuthorization)
        {
            <AuthorizeView Roles="@(Widget.Roles is null ? null : string.Join(",", Widget.Roles))" Policy="@Widget.Policy">
                <Authorized>
                    <DynamicComponent @key="@Widget.Id" Type="Widget.ComponentType" />
                </Authorized>
                <NotAuthorized>
                    <p>Unauthorized</p>
                </NotAuthorized>
            </AuthorizeView>
        }
        else
        {
            <DynamicComponent @key="@Widget.Id" Type="Widget.ComponentType" />
        }
    </MudPaper>
</CascadingValue>

@code
{
    [Parameter]
    [EditorRequired]
    public Widget Widget { get; set; } = default!;

    [CascadingParameter]
    public WidgetArea WidgetArea { get; set; } = default!;

    public string Style => $"grid-column: {X} / span {Width}; grid-row: {Y} / span {Height};"; //$"grid-column-end: span {Width}";

    [Parameter]
    [EditorRequired]
    public int Height { get; set; }

    [Parameter]
    [EditorRequired]
    public int Width { get; set; }

    [Parameter]
    [EditorRequired]
    public int X { get; set; }

    [Parameter]
    [EditorRequired]
    public int Y { get; set; }
    protected override void OnInitialized()
    {
        Widget.Updated += OnWidgetUpdated;
    }

    private void OnWidgetUpdated(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Widget.Updated -= OnWidgetUpdated;
    }
}