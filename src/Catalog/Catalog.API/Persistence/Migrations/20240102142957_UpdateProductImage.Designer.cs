// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourBrand.Catalog.API.Persistence;

#nullable disable

namespace YourBrand.Catalog.API.Persistence.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20240102142957_UpdateProductImage")]
    partial class UpdateProductImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Attribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.AttributeGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Seq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeGroups", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.AttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Seq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Handle");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Continent", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Continents", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Capital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContinentCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("ContinentCode");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.CountryCurrency", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryCode", "CurrencyCode");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("CountryCurrencies", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.CountryLanguage", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LanguageCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CountryCode", "LanguageCode");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CountryLanguages", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionType")
                        .HasColumnType("int");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Options", (string)null);

                    b.HasDiscriminator<int>("OptionType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.OptionGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Seq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("OptionGroups", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.OptionValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InventoryProductId");

                    b.Property<int?>("Seq")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionValues", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("DiscountRate")
                        .HasColumnType("float");

                    b.Property<string>("Gtin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("HasVariants")
                        .HasColumnType("bit");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsCustomizable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentProductId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RegularPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("VatRate")
                        .HasColumnType("float");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Handle");

                    b.HasIndex("ImageId");

                    b.HasIndex("ParentProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("ForVariant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMainAttribute")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ValueId");

                    b.ToTable("ProductAttributes", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanAddProducts")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<long>("ProductsCount")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Handle");

                    b.HasIndex("ParentId");

                    b.HasIndex("Path");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductCategoryAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ProductCategoryAttributes", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsInherited")
                        .HasColumnType("bit");

                    b.Property<string>("OptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptions", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductVariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("OptionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductVariantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductVariantId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantId1");

                    b.ToTable("ProductVariantOption", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryCode");

                    b.ToTable("Regions", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.VatRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Factor")
                        .HasColumnType("float");

                    b.Property<double>("Factor2")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VatRates", (string)null);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ChoiceOption", b =>
                {
                    b.HasBaseType("YourBrand.Catalog.API.Domain.Entities.Option");

                    b.Property<string>("DefaultValueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("DefaultValueId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.NumericalValueOption", b =>
                {
                    b.HasBaseType("YourBrand.Catalog.API.Domain.Entities.Option");

                    b.Property<int?>("DefaultNumericalValue")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNumericalValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinNumericalValue")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.SelectableOption", b =>
                {
                    b.HasBaseType("YourBrand.Catalog.API.Domain.Entities.Option");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<string>("SKU")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InventoryProductId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.TextValueOption", b =>
                {
                    b.HasBaseType("YourBrand.Catalog.API.Domain.Entities.Option");

                    b.Property<string>("DefaultTextValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TextValueMaxLength")
                        .HasColumnType("int");

                    b.Property<int?>("TextValueMinLength")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Attribute", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.AttributeGroup", "Group")
                        .WithMany("Attributes")
                        .HasForeignKey("GroupId");

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("Group");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.AttributeGroup", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "Product")
                        .WithMany("AttributeGroups")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.AttributeValue", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Attribute", "Attribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Country", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Continent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentCode");

                    b.Navigation("Continent");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.CountryCurrency", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Country", "Country")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Currency", "Currency")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.CountryLanguage", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Country", "Country")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Language", "Language")
                        .WithMany("CountryLanguages")
                        .HasForeignKey("LanguageCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Option", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.OptionGroup", "Group")
                        .WithMany("Options")
                        .HasForeignKey("GroupId");

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Options")
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("Group");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.OptionGroup", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "Product")
                        .WithMany("OptionGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.OptionValue", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ChoiceOption", "Option")
                        .WithMany("Values")
                        .HasForeignKey("OptionId");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Product", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ProductImage", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "ParentProduct")
                        .WithMany("Variants")
                        .HasForeignKey("ParentProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("ParentProduct");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductAttribute", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Attribute", "Attribute")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "Product")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.AttributeValue", "Value")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ValueId");

                    b.Navigation("Attribute");

                    b.Navigation("Product");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ProductCategory", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Parent");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductCategoryAttribute", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Product");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductOption", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Option", "Option")
                        .WithMany("ProductOption")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "Product")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductVariantOption", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Option", "Option")
                        .WithMany("ProductVariantOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "Product")
                        .WithMany("ProductVariantOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Product", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Region", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryCode");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Store", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("YourBrand.Catalog.API.Domain.Entities.CurrencyDisplayOptions", "CurrencyDisplayOptions", b1 =>
                        {
                            b1.Property<string>("StoreId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<bool>("IncludeVatInSalesPrice")
                                .HasColumnType("bit");

                            b1.Property<int?>("RoundingDecimals")
                                .HasColumnType("int");

                            b1.HasKey("StoreId");

                            b1.ToTable("Stores");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");
                        });

                    b.OwnsOne("YourBrand.Catalog.API.Domain.Entities.PricingOptions", "PricingOptions", b1 =>
                        {
                            b1.Property<string>("StoreId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<double>("ProfitMarginPercentage")
                                .HasColumnType("float");

                            b1.HasKey("StoreId");

                            b1.ToTable("Stores");

                            b1.WithOwner()
                                .HasForeignKey("StoreId");

                            b1.OwnsMany("YourBrand.Catalog.API.Domain.Entities.CategoryPricingOptions", "CategoryPricingOptions", b2 =>
                                {
                                    b2.Property<string>("PricingOptionsStoreId")
                                        .HasColumnType("nvarchar(450)");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("CategoryId")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<double>("ProfitMarginRate")
                                        .HasColumnType("float");

                                    b2.HasKey("PricingOptionsStoreId", "Id");

                                    b2.ToTable("CategoryPricingOptions");

                                    b2.WithOwner()
                                        .HasForeignKey("PricingOptionsStoreId");
                                });

                            b1.Navigation("CategoryPricingOptions");
                        });

                    b.Navigation("Currency");

                    b.Navigation("CurrencyDisplayOptions")
                        .IsRequired();

                    b.Navigation("PricingOptions")
                        .IsRequired();
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ChoiceOption", b =>
                {
                    b.HasOne("YourBrand.Catalog.API.Domain.Entities.OptionValue", "DefaultValue")
                        .WithMany()
                        .HasForeignKey("DefaultValueId");

                    b.Navigation("DefaultValue");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Attribute", b =>
                {
                    b.Navigation("ProductAttributes");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.AttributeValue", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Country", b =>
                {
                    b.Navigation("CountryCurrencies");

                    b.Navigation("CountryLanguages");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CountryCurrencies");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Language", b =>
                {
                    b.Navigation("CountryLanguages");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Option", b =>
                {
                    b.Navigation("ProductOption");

                    b.Navigation("ProductVariantOptions");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.OptionGroup", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Product", b =>
                {
                    b.Navigation("AttributeGroups");

                    b.Navigation("Images");

                    b.Navigation("OptionGroups");

                    b.Navigation("ProductAttributes");

                    b.Navigation("ProductOptions");

                    b.Navigation("ProductVariantOptions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Options");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("YourBrand.Catalog.API.Domain.Entities.ChoiceOption", b =>
                {
                    b.Navigation("Values");
                });
#pragma warning restore 612, 618
        }
    }
}
